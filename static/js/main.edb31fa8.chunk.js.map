{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["style","height","App","sceneSetup","width","mount","clientWidth","clientHeight","scene","THREE","camera","position","z","renderer","setSize","appendChild","domElement","addCustomSceneObjects","geometry","material","color","emissive","side","flatShading","cube","add","lights","set","startAnimationLoop","rotation","x","y","render","requestID","window","requestAnimationFrame","handleWindowResize","aspect","updateProjectionMatrix","this","addEventListener","removeEventListener","cancelAnimationFrame","ref","Component","Boolean","location","hostname","match","Container","state","isMounted","onClick","setState","React","rootElement","document","getElementById","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sMAmDMA,G,MAAQ,CACZC,OAAQ,MAiGKC,E,4MA9EbC,WAAa,WAEX,IAAMC,EAAQ,EAAKC,MAAMC,YACnBL,EAAS,EAAKI,MAAME,aAE1B,EAAKC,MAAQ,IAAIC,IACjB,EAAKC,OAAS,IAAID,IAChB,GACAL,EAAQH,EACR,GACA,KAEF,EAAKS,OAAOC,SAASC,EAAI,EAIzB,EAAKC,SAAW,IAAIJ,IACpB,EAAKI,SAASC,QAAQV,EAAOH,GAC7B,EAAKI,MAAMU,YAAY,EAAKF,SAASG,a,EAMvCC,sBAAwB,WACtB,IAAMC,EAAW,IAAIT,IAAkB,EAAG,EAAG,GACvCU,EAAW,IAAIV,IAAwB,CAC3CW,MAAO,QACPC,SAAU,OACVC,KAAMb,IACNc,aAAa,IAEf,EAAKC,KAAO,IAAIf,IAAWS,EAAUC,GACrC,EAAKX,MAAMiB,IAAI,EAAKD,MAEpB,IAAME,EAAS,GACfA,EAAO,GAAK,IAAIjB,IAAiB,SAAU,EAAG,GAC9CiB,EAAO,GAAK,IAAIjB,IAAiB,SAAU,EAAG,GAC9CiB,EAAO,GAAK,IAAIjB,IAAiB,SAAU,EAAG,GAE9CiB,EAAO,GAAGf,SAASgB,IAAI,EAAG,IAAK,GAC/BD,EAAO,GAAGf,SAASgB,IAAI,IAAK,IAAK,KACjCD,EAAO,GAAGf,SAASgB,KAAM,KAAO,KAAO,KAEvC,EAAKnB,MAAMiB,IAAIC,EAAO,IACtB,EAAKlB,MAAMiB,IAAIC,EAAO,IACtB,EAAKlB,MAAMiB,IAAIC,EAAO,K,EAGxBE,mBAAqB,WACnB,EAAKJ,KAAKK,SAASC,GAAK,IACxB,EAAKN,KAAKK,SAASE,GAAK,IAExB,EAAKlB,SAASmB,OAAO,EAAKxB,MAAO,EAAKE,QAKtC,EAAKuB,UAAYC,OAAOC,sBAAsB,EAAKP,qB,EAGrDQ,mBAAqB,WACnB,IAAMhC,EAAQ,EAAKC,MAAMC,YACnBL,EAAS,EAAKI,MAAME,aAE1B,EAAKM,SAASC,QAAQV,EAAOH,GAC7B,EAAKS,OAAO2B,OAASjC,EAAQH,EAI7B,EAAKS,OAAO4B,0B,kEApFZC,KAAKpC,aACLoC,KAAKtB,wBACLsB,KAAKX,qBACLM,OAAOM,iBAAiB,SAAUD,KAAKH,sB,6CAIvCF,OAAOO,oBAAoB,SAAUF,KAAKH,oBAC1CF,OAAOQ,qBAAqBH,KAAKN,a,+BA+EzB,IAAD,OACP,OAAO,yBAAKjC,MAAOA,EAAO2C,IAAK,SAAAA,GAAG,OAAK,EAAKtC,MAAQsC,S,GA1FtCC,aC3CEC,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2D,ICLAC,E,4MACJC,MAAQ,CAAEC,WAAW,G,uDAEX,IAAD,SACsBZ,KAAKW,MAA1BC,iBADD,SAEP,OACE,oCACE,4BAAQC,QAAS,kBAAM,EAAKC,UAAS,SAAAH,GAAK,MAAK,CAAEC,WAAYD,EAAMC,gBAChEA,EAAY,UAAY,SAE1BA,GAAa,kBAAC,EAAD,MACbA,GAAa,oE,GAXEG,IAAMV,WAiBxBW,EAAcC,SAASC,eAAe,QAC5CC,IAAS1B,OAAO,kBAAC,EAAD,MAAeuB,GDoGzB,kBAAmBI,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.edb31fa8.chunk.js","sourcesContent":["// import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n// import * as THREE from 'three';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <Shape/>\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Hi, I'm Wyll! :)\n//         </p>\n//         <p>\n//           <b>About Me:</b> I'm currently looking for a job after having gradutated\n//           with a software engineering degree from the University of\n//           Victoria.\n//         </p>\n//         <p>\n//           <b>About You:</b> Want to pay someone money to \n//           do engineering things like<br/>\n//           <ul>\n//             <li>Operations</li>\n//             <li>Back-End</li>\n//             <li>DevOps</li>\n//             <li>Infrastructure</li>\n//           </ul>\n//         </p>\n//         <p>\n//           <p>Contact me at: _</p>\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from 'three';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nconst style = {\n  height: 500 // we can control scene size by setting container dimensions\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.sceneSetup();\n    this.addCustomSceneObjects();\n    this.startAnimationLoop();\n    window.addEventListener('resize', this.handleWindowResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    // this.controls.dispose();\n  }\n\n  // Standard scene setup in Three.js. Check \"Creating a scene\" manual for more information\n  // https://threejs.org/docs/#manual/en/introduction/Creating-a-scene\n  sceneSetup = () => {\n    // get container dimensions and use them for scene sizing\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(\n      75, // fov = field of view\n      width / height, // aspect ratio\n      0.1, // near plane\n      1000 // far plane\n    );\n    this.camera.position.z = 9; // is used here to set some distance from a cube that is located at z = 0\n    // OrbitControls allow a camera to orbit around the object\n    // https://threejs.org/docs/#examples/controls/OrbitControls\n    // this.controls = new OrbitControls( this.camera, this.mount );\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement); // mount using React ref\n  };\n\n  // Here should come custom code.\n  // Code below is1 taken from Three.js BoxGeometry example\n  // https://threejs.org/docs/#api/en/geometries/BoxGeometry\n  addCustomSceneObjects = () => {\n    const geometry = new THREE.BoxGeometry(2, 2, 2);\n    const material = new THREE.MeshPhongMaterial({\n      color: 0x156289,\n      emissive: 0x072534,\n      side: THREE.DoubleSide,\n      flatShading: true\n    });\n    this.cube = new THREE.Mesh(geometry, material);\n    this.scene.add(this.cube);\n\n    const lights = [];\n    lights[0] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n\n    lights[0].position.set(0, 200, 0);\n    lights[1].position.set(100, 200, 100);\n    lights[2].position.set(- 100, - 200, - 100);\n\n    this.scene.add(lights[0]);\n    this.scene.add(lights[1]);\n    this.scene.add(lights[2]);\n  };\n\n  startAnimationLoop = () => {\n    this.cube.rotation.x += 0.01;\n    this.cube.rotation.y += 0.01;\n\n    this.renderer.render(this.scene, this.camera);\n\n    // The window.requestAnimationFrame() method tells the browser that you wish to perform\n    // an animation and requests that the browser call a specified function\n    // to update an animation before the next repaint\n    this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n  };\n\n  handleWindowResize = () => {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n\n    this.renderer.setSize(width, height);\n    this.camera.aspect = width / height;\n\n    // Note that after making changes to most of camera properties you have to call\n    // .updateProjectionMatrix for the changes to take effect.\n    this.camera.updateProjectionMatrix();\n  };\n\n  render() {\n    return <div style={style} ref={ref => (this.mount = ref)} />;\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\nclass Container extends React.Component {\n  state = { isMounted: true };\n\n  render() {\n    const { isMounted = true } = this.state;\n    return (\n      <>\n        <button onClick={() => this.setState(state => ({ isMounted: !state.isMounted }))}>\n          {isMounted ? \"Unmount\" : \"Mount\"}\n        </button>\n        {isMounted && <App />}\n        {isMounted && <div>Scroll to zoom, drag to rotate</div>}\n      </>\n    )\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Container />, rootElement);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}